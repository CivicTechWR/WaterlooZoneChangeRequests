{"version":3,"sources":["utils/labels.js","components/InformationDialog.js","components/UnpinnedZoneChangeTable.js","components/ZonesMap.js","App.js","serviceWorker.js","index.js"],"names":["hiddenProperties","Set","formattedLabels","mailToRegex","removeMailToPrefix","mailToParameter","replace","InformationDialog","propertyValue","keyValue","indexOf","href","zoneChangeInformation","this","props","Dialog","open","onClose","DialogContent","Grid","container","justify","direction","alignContent","Object","entries","map","index","has","Typography","key","align","React","Component","pointer","cursor","UnpinnedZoneChangeTable","zoneRequestsData","onZoneChangeClick","Table","TableHead","TableRow","TableCell","TableBody","element","ix","onClick","style","cityOfWaterlooCoordinates","ZonesMap","handleMarkerClick","event","payload","anchor","setDialogInformation","dialog","setState","zoneInformationDialog","resetDialogInformation","undefined","state","classes","spacing","item","center","zoom","width","c","parseFloat","className","unpinnedTable","withStyles","theme","maxWidth","fontSize","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dde3d5bd.chunk.js","sourcesContent":["\r\n\r\nconst hiddenProperties = new Set([\"locationCoordinates\", \"id\", \"locationUrl\"])\r\n\r\n\r\nconst formattedLabels = {\r\n    'applicant' : 'Applicant',\r\n    'ward': 'Ward',\r\n    'owner': 'Owner',\r\n    'staffContactName': 'Staff Contact Name',\r\n    'staffContactEmail': 'Staff Contact E-mail',\r\n    'locationName': 'Location',\r\n    'detailsUrl': 'More Details'\r\n}\r\n\r\nconst formatProperty = (key) => {\r\n    return formattedLabels[key] || key\r\n}\r\n\r\nconst mailToRegex = /mailto:(%20)?/\r\nconst removeMailToPrefix = (mailToParameter) => {\r\n    return mailToParameter.replace(mailToRegex,'')\r\n}\r\n\r\nexport{\r\n    hiddenProperties,\r\n    formatProperty,\r\n    removeMailToPrefix\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Dialog, DialogContent, Grid, Typography } from \"@material-ui/core\"\r\nimport { formatProperty, hiddenProperties, removeMailToPrefix } from '../utils/labels'\r\n\r\nclass InformationDialog extends React.Component {\r\n\r\n\r\n    propertyValue = (keyValue) => {\r\n        return (\r\n            ((keyValue[0].indexOf('Url') >= 0) && (\r\n                    <a href={keyValue[1]}>{keyValue[1]}</a>\r\n            )) || ((keyValue[0].indexOf('Email') >= 0) &&  (\r\n                    <a href={keyValue[1]}>{removeMailToPrefix(keyValue[1])}</a>\r\n            )) || ( keyValue[1] )\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {zoneChangeInformation} = this.props\r\n        return (\r\n            <Dialog open={!!zoneChangeInformation} onClose={this.props.onClose}>\r\n            <DialogContent>\r\n            <Grid container  justify=\"center\" direction=\"column\" alignContent=\"center\">\r\n                {\r\n                    zoneChangeInformation &&\r\n                        Object.entries(zoneChangeInformation).map( (keyValue,index) => {\r\n                            return !(hiddenProperties.has(keyValue[0])) && \r\n                                    <Typography key={index} align=\"left\">{formatProperty(keyValue[0])}: {this.propertyValue(keyValue)}</Typography>\r\n                        })\r\n                }\r\n            </Grid>\r\n            </DialogContent>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nInformationDialog.propTypes = {\r\n    zoneChangeInformation: PropTypes.object,\r\n    onClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InformationDialog","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core'\r\nimport { Typography } from '@material-ui/core'\r\n\r\nconst pointer = {cursor: 'pointer'};\r\n\r\nclass UnpinnedZoneChangeTable extends Component {\r\n\r\n  render() {\r\n    const { zoneRequestsData, onZoneChangeClick } = this.props\r\n    return (\r\n        <Table>\r\n            <TableHead>\r\n            <TableRow>\r\n                <TableCell>\r\n                    <Typography>\r\n                        Unpinned Zone Change Requests\r\n                    </Typography>\r\n                </TableCell>\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {\r\n            zoneRequestsData.map( (element, ix) => {\r\n                return !element['locationCoordinates'] && \r\n                (<TableRow key={ix} onClick={() => {onZoneChangeClick(element)}} style={pointer}>\r\n                <TableCell>{element['locationName'] || element['id']}</TableCell>\r\n                </TableRow>)\r\n            })\r\n            }\r\n            </TableBody>\r\n        </Table>\r\n    );\r\n  }\r\n}\r\n\r\nUnpinnedZoneChangeTable.propTypes = {\r\n    zoneRequestsData: PropTypes.array,\r\n    onZoneChangeClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default UnpinnedZoneChangeTable;","import React, { Component } from 'react';\r\nimport Map from 'pigeon-maps'\r\nimport Marker from 'pigeon-marker'\r\nimport InformationDialog from './InformationDialog'\r\nimport UnpinnedZoneChangeTable from './UnpinnedZoneChangeTable'\r\nimport { Grid } from '@material-ui/core'\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n// TODO: Remove this static test data once we have a backend to store scrapper data\r\nimport zoneRequestsData from '../data/zoneChangeRequestsTestData'\r\n\r\nconst cityOfWaterlooCoordinates = [43.4802042,-80.53831]\r\n\r\nconst styles = theme => ({\r\n  unpinnedTable: {\r\n    maxWidth: 300,\r\n    fontSize: 24,\r\n  }\r\n});\r\n\r\nclass ZonesMap extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      zoneInformationDialog: undefined\r\n    }\r\n  }\r\n\r\n  handleMarkerClick = ({ event, payload, anchor }) => {\r\n    this.setDialogInformation(payload)\r\n  }\r\n\r\n  setDialogInformation = (dialog) => {\r\n    this.setState({\r\n      zoneInformationDialog: dialog\r\n    })\r\n  }\r\n\r\n  resetDialogInformation = () => {\r\n    this.setState({\r\n      zoneInformationDialog: undefined\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { zoneInformationDialog } = this.state\r\n    const { classes } = this.props\r\n    return (\r\n      <div>\r\n        <InformationDialog zoneChangeInformation={zoneInformationDialog} onClose={this.resetDialogInformation}></InformationDialog>\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <Map center={cityOfWaterlooCoordinates} zoom={13} width={800}>\r\n              {\r\n                zoneRequestsData.map( (element, ix) => {\r\n                  return !!element['locationCoordinates'] && \r\n                        (<Marker key={ix} anchor={element['locationCoordinates'].map( (c) => parseFloat(c))} \r\n                                  payload={element} onClick={this.handleMarkerClick} />)\r\n                })\r\n              }\r\n            </Map>\r\n          </Grid>\r\n          <Grid item className={classes.unpinnedTable}>\r\n            <UnpinnedZoneChangeTable zoneRequestsData={zoneRequestsData} \r\n                                  onZoneChangeClick={this.setDialogInformation}>\r\n            </UnpinnedZoneChangeTable>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ZonesMap);","import React from 'react';\nimport ZonesMap from './components/ZonesMap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ZonesMap></ZonesMap>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}